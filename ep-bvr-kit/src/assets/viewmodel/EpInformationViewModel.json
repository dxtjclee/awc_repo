{
    "schemaVersion": "1.0.0",
    "props": {
        "view-path": {
            "type": "object"
        },
        "view-id": {
            "type": "string"
        },
        "sub-panel-context": {
            "type": "object"
        }
    },
    "ports": {
        "EpInformation_inputObject": {
            "onChangeAction": "handleInput",
            "syncObject": {}
        }
    },
    "data": {
        "xrtState": {
            "initialValues": {
                "xrtTypeLoaded": ""
            },
            "meta": {
                "xrtVMO": {
                    "field": "true",
                    "type": "viewModelObject"
                }
            }
        },
        "awElementXrtState": {
            "initialValues": {
                "xrtTypeLoaded": ""
            },
            "meta": {
                "xrtVMO": {
                    "field": "true",
                    "type": "viewModelObject"
                }
            }
        },
        "isLoading": false
    },
    "actions": {
        "handleInput": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "leaveEditConfirmation",
                    "condition": "ctx.editInProgress && ((subPanelContext.occContext && subPanelContext.occContext.editInProgress !== false) || subPanelContext.occContext.editInProgress==undefined)"
                },
                {
                    "action": "setInput",
                    "condition": "!ctx.editInProgress || subPanelContext.occContext.editInProgress===false"
                }

            ]
        },
        "leaveEditConfirmation": {
            "actionType": "JSFunctionAsync",
            "method": "leaveConfirmation",
            "events": {
                "success": [
                    {
                        "name": "epInformation.resetOnCancelEdits"
                    }
                ]
            },
            "deps": "js/editHandlerService"
        },
        "resetOnCancelEdits": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "cancelEdits"
                },
                {
                    "action": "setInput"
                }
            ]
        },
        "setInput":{
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "addIsModifiablePropertyToInputObject",
                    "condition": "conditions.isEpEnableIsModifiablePropertyEnabled"
                },
                {
                    "action": "startLoadingIndicator"
                },
                {
                    "action": "saveInputToData"
                },
                {
                    "action": "setSelection"
                },
                {
                    "action": "getAwElement",
                    "condition": "data.inputForXRT.scopeObject.modelType.typeHierarchyArray.includes('Mfg0BvrProcess') || data.inputForXRT.scopeObject.modelType.typeHierarchyArray.includes('Mfg0BvrOperation')"
                },
                {
                    "action": "setInputForAWElementXrt",
                    "condition": "data.awElementOfInputObject.length > 0"
                },
                {
                    "action": "updateCommandContext"
                },
                {
                    "action": "updateSelectedCtx",
                    "condition": "data.inputObject && data.inputObject.uid"
                },
                {
                    "action": "stopLoadingIndicator"
                }
            ]
        },
        "addIsModifiablePropertyToInputObject": {
            "actionType": "JSFunction",
            "method": "addIsModifiablePropertyToInputObject",
            "deps": "js/utils/mfeModelUtils",
            "inputData": {
                "object": "{{ports.EpInformation_inputObject.syncObject}}"
            }
        },
        "saveInputToData": {
            "actionType": "JSFunction",
            "method": "getValueInViewModel",
            "inputData": {
                "value": "{{ports.EpInformation_inputObject.syncObject}}"
            },
            "outputData": {
                "inputObject": ""
            },
            "deps": "js/mfeViewModelUtils"
        },
        "setSelection": {
            "actionType": "JSFunction",
            "method": "getValueInViewModel",
            "inputData": {
                "value": {
                    "scopeObject": "{{data.inputObject}}",
                    "xrtType": "{{subPanelContext.xrtType}}",
                    "noElementSelectedMessageForXRT": "{{subPanelContext.noElementSelectedMessageForXRT}}"
                }
            },
            "outputData": {
                "inputForXRT": ""
            },
            "deps": "js/mfeViewModelUtils"
        },
        "updateCommandContext": {
            "actionType": "JSFunction",
            "method": "setCommandContext",
            "inputData": {
                "tabModel": "{{subPanelContext}}",
                "commandContext": {
                    "inputObject": "{{data.inputObject}}",
                    "handleContext": "INFO_PANEL_CONTEXT"
                }
            },
            "deps": "js/mfeContentPanelUtil"
        },
        "updateSelectedCtx": {
            "actionType": "JSFunction",
            "method": "updateCtx",
            "deps": "js/appCtxService",
            "inputData": {
                "name": "selected",
                "value": "{{data.inputObject}}"
            }
        },
        "getAwElement": {
            "actionType": "JSFunctionAsync",
            "method": "loadAceObjects",
            "inputData": {
                "objectUid": "{{data.inputForXRT.scopeObject}}"
            },
            "outputData": {
                "awElementOfInputObject": ""
            },
            "deps": "js/epLoadService"
        },
        "setInputForAWElementXrt": {
            "actionType": "JSFunction",
            "method": "getValueInViewModel",
            "inputData": {
                "value": {
                    "scopeObject": "{{data.awElementOfInputObject[0]}}",
                    "xrtType": "{{subPanelContext.xrtType}}"
                }
            },
            "outputData": {
                "inputForAwElementXRT": ""
            },
            "deps": "js/mfeViewModelUtils"
        },
        "init": {
            "actionType": "batchJob",
            "steps": [ {
                    "action": "setInputForScopeObjectXrt"
                },
                {
                    "action": "getAwElement",
                    "condition": "data.inputForXRT.scopeObject.modelType.typeHierarchyArray.includes('Mfg0BvrProcess') || data.inputForXRT.scopeObject.modelType.typeHierarchyArray.includes('Mfg0BvrOperation')"
                },
                {
                    "action": "setInputForAWElementXrt",
                    "condition": "data.awElementOfInputObject.length > 0"
                }
            ]
        },
        "setInputForScopeObjectXrt": {
            "actionType": "JSFunction",
            "method": "getValueInViewModel",
            "inputData": {
                "value": {
                    "scopeObject": "{{subPanelContext.scopeObject}}",
                    "xrtType": "{{subPanelContext.xrtType}}",
                    "noElementSelectedMessageForXRT": "{{subPanelContext.noElementSelectedMessageForXRT}}"
                }
            },
            "outputData": {
                "inputForXRT": ""
            },
            "deps": "js/mfeViewModelUtils"
        },
        "cancelEdits": {
            "actionType": "JSFunction",
            "method": "cancelEdits",
            "deps": "js/editHandlerService",
            "events": {
                "success": [ {
                    "name": "updateURLParam"
                } ]
            }
        },
        "disableEditMode": {
            "actionType": "JSFunction",
            "method": "updatePartialCtx",
            "inputData": {
                "path": "editInProgress",
                "value": false
            },
            "deps": "js/appCtxService"
        },
        "startLoadingIndicator": {
            "actionType": "JSFunction",
            "method": "setLoadingIndicator",
            "inputData": {
                "isLoading": true
            },
            "outputData": {
                "isLoading": ""
            },
            "deps": "js/mfeMessagesService"
        },
        "stopLoadingIndicator": {
            "actionType": "JSFunction",
            "method": "setLoadingIndicator",
            "inputData": {
                "isLoading": false
            },
            "outputData": {
                "isLoading": ""
            },
            "deps": "js/mfeMessagesService"
        }
    },
    "editHandlers": {
        "infoPanelEditHandler": {
            "context": "INFO_PANEL_CONTEXT",
            "dataSource": {
                "xrtVMO": "{{data.xrtState}}"
            }
        }
    },
    "conditions": {
        "isEpEnableIsModifiablePropertyEnabled" : {
            "expression": "ctx.preferences.EP_EnableIsModifiableProperty[0] === 'true'"
        },
        "isLoading": {
            "expression": "data.isLoading === true"
        },
        "hasXRTInput": {
            "expression": "data.inputForXRT.xrtType && data.inputForXRT.scopeObject.uid"
        },
        "noInput": {
            "expression": "data.isLoading === false && !conditions.hasXRTInput"
        },
        "showXrt": {
            "expression": "data.isLoading === false && conditions.hasXRTInput"
        },
        "isObjectClassified": {
            "expression": {
                "$and": [ {
                        "$source": "data.inputForXRT.scopeObject.props.bl_rev_fnd0IcsClassNames",
                        "$query": {
                            "$notNull": true
                        }
                    },
                    {
                        "$source": "data.inputForXRT.scopeObject.props.bl_rev_fnd0IcsClassNames.dbValues[0]",
                        "$query": {
                            "$ne": ""
                        }
                    }, {
                        "$source": "data.inputForXRT.scopeObject",
                        "$query": {
                            "$notNull": true
                        }
                    }
                ]
            }
        },
        "isProcessOrOperationAndIsObjectClassified": {
            "expression": {
                "$and": [ {
                        "$source": "conditions.isObjectClassified",
                        "$query": {
                            "$eq": true
                        }
                    },
                    {
                        "$source": "conditions.isSelectedProcessOrOperation",
                        "$query": {
                            "$eq": true
                        }
                    }
                ]
            }
        },
        "isSelectedProcessOrOperation": {
            "expression": {
                "$source": "data.inputForXRT.scopeObject",
                "$query": {
                    "$all": {
                        "$source": "modelType.typeHierarchyArray",
                        "$query": {
                            "$in": [
                                "Mfg0BvrOperation",
                                "Mfg0BvrProcess"
                            ]
                        }
                    }
                }
            }
        },
        "isValidInputAvailableForAwElementXrt": {
            "expression": {
                "$and": [ {
                        "$source": "conditions.isProcessOrOperationAndIsObjectClassified",
                        "$query": {
                            "$eq": true
                        }
                    },
                    {
                        "$source": "data.inputForAwElementXRT.scopeObject",
                        "$query": {
                            "$notNull": true
                        }
                    }
                ]
            }
        }
    },

    "onEvent": [ {
        "eventId": "editHandlerStateChange",
        "action": "cancelEdits",
        "condition": "state === 'partialSave'"
        },
        {
            "eventId": "epInformation.resetOnCancelEdits",
            "action": "resetOnCancelEdits",
            "eventSource": "current"
        }
    ],

    "lifecycleHooks": {
        "onMount": "init",
        "onUnmount": "disableEditMode"
    }
}
