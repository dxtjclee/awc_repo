{
    "schemaVersion": "1.0.0",
    "props": {
        "balancing-data": {
            "type": "object"
        }
    },
    "data": {
        "productVariants": {
            "displayName": "{{i18n.productVariant}}",
            "type": "STRING",
            "hasLov": true
        },
        "staticProductVariantsList": [
            {
                "propDisplayValue": "{{i18n.all}}",
                "propInternalValue": "ALL"
            },
            {
                "propDisplayValue": "{{i18n.maximum}}",
                "propInternalValue": "MAXIMUM"
            },
            {
                "propDisplayValue": "{{i18n.weighted}}",
                "propInternalValue": "WEIGHTED"
            }
        ],
        "isDisablePvsSelection": false
    },
    "actions": {
        "init": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "initExcludeFeature"
                },
                {
                    "action": "activateProcessStructureContext"
                }
            ]
        },
        "initExcludeFeature":{
            "actionType": "JSFunction",
            "method": "initExcludeFeatureInContext",
            "inputData": {
                "excludeFeatures": ["Awb0VariantFeature"]
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "updateExcludeFeatureInContextAction":{
            "actionType": "JSFunction",
            "method": "updateExcludeFeatureInContext",
            "inputData": {
                "isExcludeFeature": "{{parameters.excludeFeature}}"
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "getProductVariantsFromCache": {
            "actionType": "JSFunction",
            "method": "getProductVariantsFromCache",
            "outputData": {
                "productVariantsFromCache": ""
            },
            "actionMessages": {
                "success": [ {
                    "condition": "conditions.hasProductVariants && conditions.isVariantRuleConfigured",
                    "message": "variantConfigurationMessage"
                }]
            },
            "deps": "js/epProductionProgramService"
        },
        "getProductVariants": {
            "actionType": "JSFunction",
            "method": "getProductVariantsList",
            "inputData": {
                "staticProductVariantsList": "{{data.staticProductVariantsList}}",
                "productVariantsFromCache": "{{data.productVariantsFromCache}}"
            },
            "outputData": {
                "productVariantsList": ""
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "updateDashboard": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "getProductVariantsFromCache",
                    "condition": "!data.productVariantsFromCache"
                },
                {
                    "action": "getProductVariants",
                    "condition": "!data.productVariantsList && conditions.hasProductVariants"
                }
            ]
        },
        "pvSelectionChanged": {
            "actionType": "JSFunction",
            "method": "setSelectedProductVariant",
            "inputData": {
                "productVariant": "{{data.productVariants.dbValue}}",
                "excludeFeature":  ["Awb0VariantFeature"]
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "resetConfigurationBatchAction": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "updateExcludeFeatureInContextAction",
                    "inputArg": {
                        "excludeFeature":  ["Awb0VariantFeature"]
                    }
                },
                {
                    "action": "resetConfiguration"
                },
                {
                    "action": "handleResponseAndReloadPageWithParam"
                }

            ]
        },
        "handleResponseAndReloadPageWithParam": {
            "actionType": "JSFunction",
            "method": "handleResponse",
            "inputData": {
                "appliedConfig": "{{data.appliedConfig}}",
                "shouldUpdatePciParam": true
            },
            "deps": "js/epStructureConfigurationService"
        },
        "resetConfiguration": {
            "actionType": "JSFunctionAsync",
            "method": "resetConfiguration",
            "inputData": {
                "processStructure": "{{ctx.epTaskPageContext.loadedObject}}",
                "processVariant": "{{ctx.epTaskPageContext.processPCI.props.awb0VariantRules.dbValues}}"
            },
            "outputData": {
                "appliedConfig": ""
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "getProductVariantToDisplay": {
            "actionType": "JSFunction",
            "method": "getProductVariantToDisplay",
            "inputData": {
                "productVariantsList": "{{data.productVariantsList}}"
            },
            "outputData": {
                "productVariants.dbValue": "result.propInternalValue",
                "productVariants.uiValue": "result.propDisplayValue"
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "activateProcessStructureContext": {
            "actionType": "JSFunctionAsync",
            "method": "activateStructureContext",
            "inputData": {
                "pciUid": "{{ctx.state.params.processPCI ? ctx.state.params.processPCI : ctx.epTaskPageContext.processPCI.uid}}",
                "contextKey": "processContext",
                "structureKey": "epTaskPageContext.processStructure",
                "configFilterPanelTitle": "{{i18n.bopConfiguration}}",
                "configFlagContextName": "processStructureConfigFlags",
                "scopeKey": "epTaskPageContext.loadedObject",
                "topElement": "{{ctx.epTaskPageContext.processStructure}}"
            },
            "outputData": {
                "structureContextActivated": ""
            },
            "deps": "js/epStructureConfigurationService"
        },
        "handleDisablePvsSelectionBatchAction":{
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "updateExcludeFeatureInContextAction",
                    "inputArg": {
                        "excludeFeature": null
                    }
                },
                {
                    "action": "handleDisablePvsSelection"
                }
            ]
        },
        "handleDisablePvsSelection": {
            "actionType": "JSFunction",
            "method": "getValueInViewModel",
            "inputData": {
                "value": true
            },
            "outputData": {
                "isDisablePvsSelection": ""
            },
            "deps": "js/mfeViewModelUtils"
        },
        "clearContextBatchAction":{
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "clearAppContext"
                },
                {
                    "action": "clearPV",
                    "condition": "data.productVariantsFromCache.length > 0 && data.isDisablePvsSelection === false && data.productVariants.dbValue !== 'ALL'"
                }
            ]
        },
        "clearPV":{
            "actionType": "JSFunctionAsync",
            "method": "setSelectedProductVariant",
            "inputData": {
                "productVariant": "ALL",
                "excludeFeatures": null,
                "isShouldReloadAfterPVChange": false
            },
            "deps": "js/epBalancingProductVariantsService"
        },
        "clearAppContext":{
            "actionType": "JSFunction",
            "method": "unRegisterCtx",
            "deps": "js/appCtxService",
            "inputData": {
                "path": "ep.excludeVariantFeature"
            }
        }
    },
    "onEvent": [
        {
            "eventId": "ep.productVariant.changed",
            "action": "getProductVariantToDisplay"
        }
    ],
    "messages": {
        "variantConfigurationMessage": {
            "messageType": "WARNING",
            "messageText": "{{i18n.variantConfigurationMessage}}",
            "navigationOptions": [
                {
                    "option": "cancel",
                    "text": "{{i18n.cancel}}",
                    "action": "handleDisablePvsSelectionBatchAction"
                },
                {
                    "option": "clear",
                    "text": "{{i18n.clear}}",
                    "action": "resetConfigurationBatchAction"
                }
            ]
        }
    },
    "conditions": {
        "hasProductVariants": {
            "expression": "data.productVariantsFromCache.length > 0"
        },
        "isVariantRuleConfigured": {
            "expression": "ctx.epTaskPageContext.processPCI.props.awb0VariantRules.dbValues.length > 0"
        }
    },
    "i18n": {
        "productVariant": [
            "BalancingMessages"
        ],
        "all": [
            "BalancingMessages"
        ],
        "maximum": [
            "BalancingMessages"
        ],
        "weighted": [
            "BalancingMessages"
        ],
        "variantConfigurationMessage": [
            "BalancingMessages"
        ],
        "cancel": [
            "BalancingMessages"
        ],
        "clear": [
            "BalancingMessages"
        ]
    },
    "lifecycleHooks":{
        "onMount": "init",
        "onUnmount": "clearContextBatchAction",
        "onUpdate": {
            "action": "updateDashboard",
            "observers": [
                "props.balancingData.loadedData.balancingScope",
                "props.balancingData.loadedData.balancingStations"
            ]
        }
    }
}
